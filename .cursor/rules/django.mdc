---
description: Django Framework Standards - Template-First Architecture
globs: ["*.py", "*.html.j2", "*.html", "manage.py", "*/migrations/*.py"]
alwaysApply: false
---

# Django Development Guidelines

## Architecture Principles

### Template-First Philosophy
- **Default to Django templates** (`.html.j2`) for all UI components and pages
- Use server-side rendering for better SEO, performance, and maintainability
- Only integrate Vue components for truly interactive elements (graphs, real-time updates, complex forms)
- Maintain clear separation between presentation and business logic
- Use Bootstrap 5 for styling

### API Security Boundaries
- **All data access must go through API functions** with proper authentication and authorization
- Use API functions in templates even for internal data access to maintain security consistency
- Implement consistent validation and sanitization patterns across all endpoints
- Design APIs to be repurposable for future frontend separation

### Best Practices
- Write all JavaScript as TypeScript
- Don't use in-line styling for CSS, instead use reusable CSS styling
- Minimize the amount of TypeScript in favor of Server Side Rendering (SSR)

## Django Framework Standards

### Project Structure
- Structure projects using Django apps for modularity and reusability
- Keep apps focused on single domains or functionalities
- Use consistent naming conventions across apps
- Organize templates in app-specific directories with clear hierarchies

### Views & URL Patterns
- **Prefer Class-Based Views (CBVs)** for complex logic with mixins
- **Use Function-Based Views (FBVs)** for simple, straightforward logic
- Keep views light - delegate business logic to models, services, or managers
- Use appropriate mixins for common functionality (authentication, permissions)
- Implement proper error handling with meaningful error pages
- Use type hints for all view methods and functions

### Template System
- **Always use `.html.j2` extension** to clearly identify Jinja2/Django templates
- Use template inheritance (`{% extends %}`) for consistent layouts
- Create reusable template components with `{% include %}`
- Use template blocks for customization points
- Implement proper escaping for user-generated content
- Keep template logic minimal - complex logic belongs in views or template tags

### API Development with Django Ninja
- **Use Django Ninja for all new API development**
- Define clear schemas for request/response validation
- Implement proper authentication and authorization
- Use appropriate HTTP status codes and error responses
- Add comprehensive API documentation with examples
- Version APIs from the beginning (`/api/v1/`)

### Security Best Practices
- **Always validate and sanitize user input**
- Use Django's built-in authentication and authorization
- Implement CSRF protection on all forms
- Use environment variables for sensitive configuration
- Implement rate limiting and request throttling

### Testing Standards
- **Use pytest-django for all Django testing**
- Test views, models, forms, and API endpoints comprehensively
- Use Django's test client for integration testing
- Mock external dependencies and services
- Test both success and failure scenarios

### Migration Management
- **Never edit existing migration files**
- Create descriptive migration names
- Test migrations on production-like data
- Keep migrations atomic and reversible where possible
