name: CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - master
  release:
    types: [published]

permissions:
  contents: read

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.11"

      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # Install uv directly instead of using a third-party action
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Install minimal Python dependencies
        run: |
          uv sync --locked --frozen --only-dev

      # Install bun directly instead of using a third-party action
      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install JS dependencies
        run: bun install

      - name: Run code quality checks
        run: |
          echo "Running all code quality checks via pre-commit..."
          uv run pre-commit run --all-files

          # Add results to GitHub step summary
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "All pre-commit hooks passed successfully." >> $GITHUB_STEP_SUMMARY

      - name: Run Django template linting
        run: |
          echo "Running Django template linting with djlint..."

          # Run format check
          echo "Checking template formatting..."
          uv run djlint . --extension=html.j2 --check

          # Run linting
          echo "Running template linting..."
          uv run djlint . --extension=html.j2 --lint

          # Add results to GitHub step summary
          echo "## Django Template Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "Django template linting and format checking completed successfully." >> $GITHUB_STEP_SUMMARY

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - name: "Core Tests"
            path: "sbomify/apps/core/tests/"
          - name: "SBOM Tests"
            path: "sbomify/apps/sboms/tests/"
          - name: "Team Tests"
            path: "sbomify/apps/teams/tests/"
          - name: "Billing Tests"
            path: "sbomify/apps/billing/tests/"
          - name: "Document Tests"
            path: "sbomify/apps/documents/tests/"
          - name: "Licensing Tests"
            path: "sbomify/apps/licensing/tests/"
          - name: "Access Token Tests"
            path: "sbomify/apps/access_tokens/tests.py"
          - name: "Notification Tests"
            path: "sbomify/apps/notifications/tests.py"
          - name: "Onboarding Tests"
            path: "sbomify/apps/onboarding/tests.py"
    env:
      DJANGO_SETTINGS_MODULE: sbomify.test_settings
      DEBUG: True
      STRIPE_SECRET_KEY: 'sk_test_dummy_key_for_ci'
      STRIPE_PUBLISHABLE_KEY: 'pk_test_dummy_key_for_ci'
      STRIPE_WEBHOOK_SECRET: 'whsec_dummy_key_for_ci'
      STRIPE_ENDPOINT_SECRET: 'whsec_dummy_key_for_ci'
      DJANGO_TEST: 'true'

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.10.12"

      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version

      - name: Install Python dependencies
        run: |
          uv sync --frozen

      - name: Setup test environment
        run: |
          cp .env.example .env
          # Create static assets structure
          mkdir -p sbomify/static/assets
          for file in main.js main.css teams.js teams.css billing.js billing.css sboms.js sboms.css django-messages.js alerts-global.js; do
            echo "// Test asset" > sbomify/static/assets/$file
          done
          uv run python manage.py collectstatic --noinput

      - name: Run ${{ matrix.test-group.name }}
        run: |
          echo "## ${{ matrix.test-group.name }} Results" >> $GITHUB_STEP_SUMMARY
          echo "Running tests in: ${{ matrix.test-group.path }}" >> $GITHUB_STEP_SUMMARY
          echo "Test count: $(uv run pytest --collect-only --quiet ${{ matrix.test-group.path }} | grep '::test_' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run tests for this specific group and capture exit code properly
          uv run pytest --tb=short -v ${{ matrix.test-group.path }} | tee test_results.txt
          PYTEST_EXIT_CODE=${PIPESTATUS[0]}

          # Add summary to GitHub
          echo "### Test Summary:" >> $GITHUB_STEP_SUMMARY
          grep -E "(failed|passed|errors|warnings)" test_results.txt | tail -1 >> $GITHUB_STEP_SUMMARY || echo "Test run completed" >> $GITHUB_STEP_SUMMARY

          # Show failed tests if any
          if grep -q "FAILED" test_results.txt; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
            grep "FAILED" test_results.txt >> $GITHUB_STEP_SUMMARY || true
          fi

          # Exit with failure if tests failed (use pytest exit code)
          if [ $PYTEST_EXIT_CODE -ne 0 ]; then
            echo "Tests failed in ${{ matrix.test-group.name }}"
            exit 1
          fi

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install JS dependencies
        run: bun install

      - name: Run Frontend Tests
        run: |
          echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          bun test | tee -a $GITHUB_STEP_SUMMARY

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    outputs:
      github-image: ${{ steps.meta.outputs.github_image_id }}
      docker-hub-image: ${{ steps.meta.outputs.docker_hub_image_id }}
      image-digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
    env:
      IMAGE_NAME: sbomify
    permissions:
      id-token: write
      contents: read
      packages: write
      attestations: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: sbomifyhub
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          GITHUB_IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          GITHUB_IMAGE_ID=$(echo $GITHUB_IMAGE_ID | tr '[A-Z]' '[a-z]')
          DOCKER_HUB_IMAGE_ID=docker.io/sbomifyhub/${{ env.IMAGE_NAME }}

          # For pull requests, just set dummy tags (won't be pushed anyway)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAGS="$GITHUB_IMAGE_ID:pr-${{ github.event.number }}"
          # Determine tags based on trigger for pushes/releases
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            # For git tags, use the version number (keep 'v' prefix)
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,refs/tags/,,')
            TAGS="$GITHUB_IMAGE_ID:$VERSION,$DOCKER_HUB_IMAGE_ID:$VERSION"
          else
            # For master branch pushes, use latest
            TAGS="$GITHUB_IMAGE_ID:latest,$DOCKER_HUB_IMAGE_ID:latest"
          fi

          echo "github_image_id=$GITHUB_IMAGE_ID" >> $GITHUB_OUTPUT
          echo "docker_hub_image_id=$DOCKER_HUB_IMAGE_ID" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push to registries
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest GitHub Container Registry image
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ steps.meta.outputs.github_image_id }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Attest Docker Hub image
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ steps.meta.outputs.docker_hub_image_id }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Add build summary for non-pushes
        if: ${{ !(github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        run: |
          echo "## Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Docker image built successfully but not pushed to registries." >> $GITHUB_STEP_SUMMARY
          echo "Images are only pushed on master branch or version tags." >> $GITHUB_STEP_SUMMARY

      - name: Add deployment summary
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "## Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Images:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All images have been attested with GitHub build provenance for supply chain security." >> $GITHUB_STEP_SUMMARY

  generate-sboms:
    name: Generate SBOMs
    runs-on: ubuntu-latest
    if: ${{ success() && startsWith(github.ref, 'refs/tags/v') }}
    needs: [docker-build]
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload backend SBOM
        uses: sbomify/github-action@8ea6f28cd562edee2665001cd4f17aaf7a283722 # master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: 2hg-dk8ixV
          COMPONENT_NAME: 'sbomify-backend'
          COMPONENT_VERSION: ${{ github.ref_name }}
          PRODUCT_RELEASE: '["eP_4dk8ixV:${{ github.ref_name }}"]'
          OUTPUT_FILE: backend.cdx.json
          LOCK_FILE: 'uv.lock'
          AUGMENT: true
          ENRICH: true
          UPLOAD: true

      - name: Attest
        if: ${{ success() }}
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: '${{ github.workspace }}/backend.cdx.json'

      - name: Upload container SBOM
        uses: sbomify/github-action@8ea6f28cd562edee2665001cd4f17aaf7a283722 # master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: iVajxXMIqqyi
          COMPONENT_NAME: 'sbomify-container'
          COMPONENT_VERSION: ${{ github.ref_name }}
          PRODUCT_RELEASE: '["eP_4dk8ixV:${{ github.ref_name }}"]'
          OUTPUT_FILE: container.cdx.json
          DOCKER_IMAGE: ${{ needs.docker-build.outputs.docker-hub-image }}:${{ github.ref_name }}
          AUGMENT: true
          ENRICH: true
          UPLOAD: true

      - name: Attest
        if: ${{ success() }}
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: '${{ github.workspace }}/container.cdx.json'

      - name: Upload frontend SBOM
        uses: sbomify/github-action@8ea6f28cd562edee2665001cd4f17aaf7a283722 # master
        env:
          TOKEN: ${{ secrets.SBOMIFY_TOKEN }}
          COMPONENT_ID: vKhyt5bLHk4B
          COMPONENT_NAME: 'sbomify-frontend'
          COMPONENT_VERSION: ${{ github.ref_name }}
          PRODUCT_RELEASE: '["eP_4dk8ixV:${{ github.ref_name }}"]'
          OUTPUT_FILE: frontend.cdx.json
          LOCK_FILE: 'bun.lock'
          ENRICH: true
          AUGMENT: true
          UPLOAD: true

      - name: Attest
        if: ${{ success() }}
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-path: '${{ github.workspace }}/frontend.cdx.json'
