# Generated by Django 5.2.3 on 2025-06-30 09:00

from django.db import migrations


def forwards_func(apps, schema_editor):
    """Update ContentType records to change app_label from 'sboms' to 'catalog'."""
    ContentType = apps.get_model("contenttypes", "ContentType")

    models_to_migrate = ["product", "project", "component", "productproject", "projectcomponent"]

    for model_name in models_to_migrate:
        # Check if sboms ContentType exists
        sboms_ct = ContentType.objects.filter(app_label="sboms", model=model_name).first()

        # Check if catalog ContentType exists
        catalog_ct = ContentType.objects.filter(app_label="catalog", model=model_name).first()

        if sboms_ct and catalog_ct:
            # Both exist - this is the conflict case
            # The catalog one was auto-created and likely has no associated data
            # The sboms one has the real data, so we keep it and remove the empty catalog one
            catalog_ct.delete()
            sboms_ct.app_label = "catalog"
            sboms_ct.save()
        elif sboms_ct and not catalog_ct:
            # Only sboms exists - safe to update
            sboms_ct.app_label = "catalog"
            sboms_ct.save()
        elif not sboms_ct and catalog_ct:
            # Only catalog exists - leave it as is (this shouldn't happen in normal flow)
            pass
        # If neither exists, that's also fine - nothing to do

    # CRITICAL SAFEGUARD: Validate SBOM-Component relationships after ContentType migration
    SBOM = apps.get_model("sboms", "SBOM")
    if SBOM.objects.exists():
        # Count SBOMs before migration
        sbom_count_before = SBOM.objects.count()

        # Count SBOMs that can access their components
        accessible_sboms = 0
        for sbom in SBOM.objects.all():
            try:
                # This will fail if the FK relationship is broken
                if sbom.component_id:
                    accessible_sboms += 1
            except Exception as e:
                # Log the error but don't fail the migration
                print(f"WARNING: SBOM {sbom.id} has broken component relationship: {e}")

        print(f"ContentType Migration Validation:")
        print(f"- Total SBOMs: {sbom_count_before}")
        print(f"- SBOMs with accessible components: {accessible_sboms}")

        if accessible_sboms < sbom_count_before:
            print(f"WARNING: {sbom_count_before - accessible_sboms} SBOMs may have broken component relationships!")


def reverse_func(apps, schema_editor):
    """Reverse the ContentType changes by updating app_label back to 'sboms'."""
    ContentType = apps.get_model("contenttypes", "ContentType")

    models_to_migrate = ["product", "project", "component", "productproject", "projectcomponent"]

    for model_name in models_to_migrate:
        # Update catalog ContentType records back to sboms
        catalog_ct = ContentType.objects.filter(app_label="catalog", model=model_name).first()
        if catalog_ct:
            catalog_ct.app_label = "sboms"
            catalog_ct.save()


class Migration(migrations.Migration):
    dependencies = [
        ("catalog", "0002_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
