/**
 * Vulnerability Trends Component - TypeScript implementation
 * Replaces VulnerabilityTimeSeries.vue with Django SSR + TypeScript
 */

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler,
  ChartConfiguration,
  ChartType,
  TooltipItem,
  ChartEvent,
  ActiveElement
} from 'chart.js';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

interface TimeSeriesData {
  date: string;
  total_vulnerabilities: number;
  scans_count: number;
  severities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
  providers: Record<string, { scans: number; vulnerabilities: number }>;
}

interface VulnerabilityItem {
  id: string;
  severity: string;
  summary?: string;
  affected_components?: number;
  external_url?: string;
  packages?: Array<{
    name: string;
    version: string;
  }>;
}

interface ComponentItem {
  id: string;
  name: string;
  sbom_count: number;
  vulnerability_count: number;
  severities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
}

interface SbomItem {
  id: string;
  name: string;
  format: string;
  format_version: string;
  component_name: string;
  vulnerability_count: number;
  severities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
  last_scan_date: string;
}

interface DrillDownData {
  components?: ComponentItem[];
  sboms?: SbomItem[];
  vulnerabilities?: VulnerabilityItem[];
}

interface RecentScanItem {
  id: string;
  sbom_id: string;
  sbom_name: string;
  sbom_version?: string;
  component_name: string;
  total_vulnerabilities: number;
  critical_vulnerabilities: number;
  high_vulnerabilities: number;
  medium_vulnerabilities: number;
  low_vulnerabilities: number;
  scan_date: string;
  provider: string;
  format: string;
  format_version: string;
  last_scan_date: string;
  severities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
}

interface Summary {
  total_scans: number;
  total_vulnerabilities: number;
  severity_totals: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
  provider_summary: Record<string, { scans: number; vulnerabilities: number }>;
  date_range: {
    start: string;
    end: string;
    days: number;
  };
}

interface TimeSeriesResponse {
  time_series: TimeSeriesData[];
  summary: Summary;
}

type VulnChartType = 'timeline' | 'severity' | 'providers';

class VulnerabilityTrendsComponent {
  private componentId: string;
  private teamKey: string;
  private selectedDays: number = 7;
  private chartType: VulnChartType = 'timeline';
  private chart: ChartJS | null = null;
  private data: TimeSeriesResponse | null = null;
  private isLoading: boolean = false;
  private recentScans: RecentScanItem[] = [];
  private drillDownData: DrillDownData | null = null;

  // Color schemes
  private severityColors = {
    critical: '#dc3545',
    high: '#fd7e14',
    medium: '#ffc107',
    low: '#198754',
    info: '#0dcaf0'
  };

  private providerColors = {
    osv: '#4285f4',
    dependency_track: '#10b981'
  };

  constructor(config: { componentId: string; teamKey: string }) {
    this.componentId = config.componentId;
    this.teamKey = config.teamKey;
    this.init();
  }

  private init(): void {
    this.setupEventListeners();
    this.loadData();
    this.loadRecentScans();
  }

  private setupEventListeners(): void {
    // Time range buttons
    document.querySelectorAll('[data-days]').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const days = parseInt(target.getAttribute('data-days') || '7');
        this.setTimeRange(days);
      });
    });

    // Chart type buttons
    document.querySelectorAll('[data-chart-type]').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const chartType = target.getAttribute('data-chart-type') as VulnChartType;
        this.setChartType(chartType);
      });
    });

    // Refresh button
    const refreshBtn = document.getElementById('refresh-vuln-data');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => this.loadData());
    }
  }

  private async loadData(): Promise<void> {
    this.isLoading = true;
    this.showLoading();

    try {
      const params = new URLSearchParams({
        days: this.selectedDays.toString(),
        component_id: this.componentId,
        latest_sbom_only: 'true'
      });

      const response = await fetch(
        `/api/v1/vulnerability-scanning/workspaces/${this.teamKey}/vulnerability-timeseries?${params}`
      );

      if (!response.ok) {
        throw new Error(`Failed to load data: ${response.status}`);
      }

      this.data = await response.json();
      this.updateUI();

    } catch (err) {
      this.showError(err instanceof Error ? err.message : 'Failed to load vulnerability trends');
    } finally {
      this.isLoading = false;
    }
  }

  private async loadRecentScans(): Promise<void> {
    try {
      const params = new URLSearchParams({
        days: this.selectedDays.toString(),
        component_id: this.componentId,
        latest_sbom_only: 'true'
      });

      const response = await fetch(
        `/api/v1/vulnerability-scanning/workspaces/${this.teamKey}/vulnerability-stats?${params}`
      );

      if (response.ok) {
        const statsData = await response.json();
        this.recentScans = statsData.recent_results || [];
        this.updateRecentScansUI();
      }
    } catch (err) {
      console.error('Failed to load recent scans:', err);
      this.recentScans = [];
    }
  }

  private setTimeRange(days: number): void {
    if (this.selectedDays !== days) {
      this.selectedDays = days;
      this.updateTimeRangeButtons(days);
      this.loadData();
      this.loadRecentScans();
    }
  }

  private setChartType(type: VulnChartType): void {
    this.chartType = type;
    this.updateChartTypeButtons(type);
    this.updateChart();
  }

  private updateTimeRangeButtons(selectedDays: number): void {
    document.querySelectorAll('[data-days]').forEach(button => {
      const days = parseInt(button.getAttribute('data-days') || '0');
      button.classList.toggle('btn-primary', days === selectedDays);
      button.classList.toggle('btn-outline-primary', days !== selectedDays);
    });

    // Update days count in stats
    const daysCountEl = document.getElementById('days-count');
    if (daysCountEl) {
      daysCountEl.textContent = selectedDays.toString();
    }
  }

  private updateChartTypeButtons(selectedType: VulnChartType): void {
    document.querySelectorAll('[data-chart-type]').forEach(button => {
      const type = button.getAttribute('data-chart-type');
      button.classList.toggle('btn-primary', type === selectedType);
      button.classList.toggle('btn-outline-primary', type !== selectedType);
    });
  }

  private showLoading(): void {
    document.getElementById('vuln-loading')?.classList.remove('d-none');
    document.getElementById('vuln-error')?.classList.add('d-none');
    document.getElementById('vuln-no-data')?.classList.add('d-none');
    document.getElementById('vuln-chart-container')?.classList.add('d-none');
  }

  private showError(message: string): void {
    document.getElementById('vuln-loading')?.classList.add('d-none');
    document.getElementById('vuln-error')?.classList.remove('d-none');
    document.getElementById('vuln-no-data')?.classList.add('d-none');
    document.getElementById('vuln-chart-container')?.classList.add('d-none');

    const errorMessageEl = document.getElementById('error-message');
    if (errorMessageEl) {
      errorMessageEl.textContent = message;
    }
  }

  private showNoData(): void {
    document.getElementById('vuln-loading')?.classList.add('d-none');
    document.getElementById('vuln-error')?.classList.add('d-none');
    document.getElementById('vuln-no-data')?.classList.remove('d-none');
    document.getElementById('vuln-chart-container')?.classList.add('d-none');
  }

  private showChart(): void {
    document.getElementById('vuln-loading')?.classList.add('d-none');
    document.getElementById('vuln-error')?.classList.add('d-none');
    document.getElementById('vuln-no-data')?.classList.add('d-none');
    document.getElementById('vuln-chart-container')?.classList.remove('d-none');
  }

  private updateUI(): void {
    if (!this.data || this.data.time_series.length === 0 || this.data.summary.total_scans === 0) {
      this.showNoData();
      return;
    }

    this.showChart();
    this.updateSummaryStats();
    this.updateChart();
    this.updateSeverityLegend();
  }

  private updateSummaryStats(): void {
    if (!this.data) return;

    const summary = this.data.summary;
    
    const totalScansEl = document.getElementById('total-scans');
    if (totalScansEl) totalScansEl.textContent = summary.total_scans.toString();

    const totalVulnsEl = document.getElementById('total-vulnerabilities');
    if (totalVulnsEl) totalVulnsEl.textContent = summary.total_vulnerabilities.toString();

    const criticalHighEl = document.getElementById('critical-high-count');
    if (criticalHighEl) {
      const criticalHigh = summary.severity_totals.critical + summary.severity_totals.high;
      criticalHighEl.textContent = criticalHigh.toString();
    }
  }

  private updateChart(): void {
    const canvas = document.getElementById('vulnerability-chart') as HTMLCanvasElement;
    if (!canvas || !this.data) return;

    // Destroy existing chart
    if (this.chart) {
      this.chart.destroy();
    }

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let config: ChartConfiguration;

    switch (this.chartType) {
      case 'timeline':
        config = this.getTimelineChartConfig();
        break;
      case 'severity':
        config = this.getSeverityChartConfig();
        break;
      case 'providers':
        config = this.getProviderChartConfig();
        break;
      default:
        config = this.getTimelineChartConfig();
    }

    this.chart = new ChartJS(ctx, config);
  }

  private getTimelineChartConfig(): ChartConfiguration {
    if (!this.data) throw new Error('No data available');

    const timeSeries = this.data.time_series;
    const labels = timeSeries.map(item => this.formatDateLabel(item.date));

    return {
      type: 'line',
      data: {
        labels,
        datasets: [
          {
            label: 'Critical',
            data: timeSeries.map(item => item.severities.critical),
            borderColor: this.severityColors.critical,
            backgroundColor: this.severityColors.critical + '20',
            fill: true,
            tension: 0.1
          },
          {
            label: 'High',
            data: timeSeries.map(item => item.severities.high),
            borderColor: this.severityColors.high,
            backgroundColor: this.severityColors.high + '20',
            fill: true,
            tension: 0.1
          },
          {
            label: 'Medium',
            data: timeSeries.map(item => item.severities.medium),
            borderColor: this.severityColors.medium,
            backgroundColor: this.severityColors.medium + '20',
            fill: true,
            tension: 0.1
          },
          {
            label: 'Low',
            data: timeSeries.map(item => item.severities.low),
            borderColor: this.severityColors.low,
            backgroundColor: this.severityColors.low + '20',
            fill: true,
            tension: 0.1
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 2,
        plugins: {
          title: {
            display: true,
            text: 'Vulnerability Trends Over Time'
          },
          legend: {
            display: true,
            position: 'top'
          },
          tooltip: {
            mode: 'index',
            intersect: false,
            callbacks: {
              title: (context) => `Date: ${context[0].label}`,
              afterBody: (context) => {
                const dataIndex = context[0].dataIndex;
                const dayData = this.data!.time_series[dataIndex];
                return `Total Scans: ${dayData.scans_count}`;
              }
            }
          }
        },
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: 'Date'
            }
          },
          y: {
            display: true,
            title: {
              display: true,
              text: 'Vulnerabilities'
            },
            beginAtZero: true
          }
        },
        interaction: {
          mode: 'nearest',
          axis: 'x',
          intersect: false
        },
        onClick: (event: ChartEvent, elements: ActiveElement[]) => {
          this.handleTimelineClick(event, elements);
        }
      }
    };
  }

  private getSeverityChartConfig(): ChartConfiguration {
    if (!this.data) throw new Error('No data available');

    const severities = this.data.summary.severity_totals;
    const nonZeroSeverities = Object.entries(severities).filter(([, count]) => count > 0);

    return {
      type: 'bar',
      data: {
        labels: nonZeroSeverities.map(([severity]) => this.formatSeverityName(severity)),
        datasets: [{
          label: 'Vulnerabilities',
          data: nonZeroSeverities.map(([, count]) => count),
          backgroundColor: nonZeroSeverities.map(([severity]) => 
            this.severityColors[severity as keyof typeof this.severityColors]
          ),
          borderColor: nonZeroSeverities.map(([severity]) => 
            this.severityColors[severity as keyof typeof this.severityColors]
          ),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 2,
        plugins: {
          title: {
            display: true,
            text: 'Vulnerabilities by Severity'
          },
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Count'
            }
          }
        },
        onClick: (event: ChartEvent, elements: ActiveElement[]) => {
          this.handleSeverityClick(event, elements);
        }
      }
    };
  }

  private getProviderChartConfig(): ChartConfiguration {
    if (!this.data) throw new Error('No data available');

    const providers = this.data.summary.provider_summary;
    const providerEntries = Object.entries(providers).filter(([, stats]) => stats.vulnerabilities > 0);

    return {
      type: 'doughnut',
      data: {
        labels: providerEntries.map(([provider]) => this.formatProviderName(provider)),
        datasets: [{
          label: 'Vulnerabilities',
          data: providerEntries.map(([, stats]) => stats.vulnerabilities),
          backgroundColor: providerEntries.map(([provider]) =>
            this.providerColors[provider as keyof typeof this.providerColors] || '#6c757d'
          ),
          borderWidth: 2,
          borderColor: '#ffffff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        aspectRatio: 1.5,
        plugins: {
          title: {
            display: true,
            text: 'Vulnerabilities by Provider'
          },
          legend: {
            display: true,
            position: 'right'
          }
        },
        onClick: (event: ChartEvent, elements: ActiveElement[]) => {
          this.handleProviderClick(event, elements);
        }
      }
    };
  }

  private updateSeverityLegend(): void {
    if (!this.data) return;

    const severities = this.data.summary.severity_totals;
    
    Object.entries(severities).forEach(([severity, count]) => {
      const item = document.querySelector(`[data-severity="${severity}"]`);
      if (item) {
        const countEl = item.querySelector('.severity-count');
        if (countEl) {
          countEl.textContent = count.toString();
        }
        // Hide if count is 0
        item.style.display = count > 0 ? 'flex' : 'none';
      }
    });
  }

  private updateRecentScansUI(): void {
    const section = document.getElementById('recent-scans-section');
    const list = document.getElementById('recent-scans-list');
    const countEl = document.getElementById('recent-scans-count');
    const showMoreEl = document.getElementById('show-more-scans');
    const totalEl = document.getElementById('total-recent-scans');

    if (!section || !list || !countEl) return;

    if (this.recentScans.length === 0) {
      section.classList.add('d-none');
      return;
    }

    section.classList.remove('d-none');
    countEl.textContent = this.recentScans.length.toString();

    // Show first 5 scans
    const visibleScans = this.recentScans.slice(0, 5);
    list.innerHTML = visibleScans.map(scan => this.renderRecentScanItem(scan)).join('');

    // Show "show more" if there are more than 5
    if (showMoreEl && totalEl) {
      if (this.recentScans.length > 5) {
        showMoreEl.classList.remove('d-none');
        totalEl.textContent = this.recentScans.length.toString();
      } else {
        showMoreEl.classList.add('d-none');
      }
    }
  }

  private renderRecentScanItem(scan: RecentScanItem): string {
    const versionBadge = scan.sbom_version ? 
      `<span class="version-badge">${scan.sbom_version}</span>` : '';

    return `
      <div class="recent-scan-item" onclick="navigateToSbom('${scan.sbom_id}')">
        <div class="scan-info">
          <div class="scan-name">
            <i class="fas fa-file-code me-2"></i>
            ${scan.sbom_name}
            ${versionBadge}
            <span class="component-name">${scan.component_name}</span>
          </div>
          <div class="scan-meta">
            <span class="provider-badge ${scan.provider}">${this.formatProviderName(scan.provider)}</span>
            <span class="scan-date">${this.formatDate(scan.scan_date)}</span>
          </div>
        </div>
        <div class="scan-vulns">
          <div class="vuln-summary">
            <span class="total-count">${scan.total_vulnerabilities}</span>
            <span class="vuln-label">vulnerabilities</span>
          </div>
          <div class="severity-badges">
            ${scan.critical_vulnerabilities > 0 ? `<span class="severity-badge critical">${scan.critical_vulnerabilities} Critical</span>` : ''}
            ${scan.high_vulnerabilities > 0 ? `<span class="severity-badge high">${scan.high_vulnerabilities} High</span>` : ''}
            ${scan.medium_vulnerabilities > 0 ? `<span class="severity-badge medium">${scan.medium_vulnerabilities} Medium</span>` : ''}
            ${scan.low_vulnerabilities > 0 ? `<span class="severity-badge low">${scan.low_vulnerabilities} Low</span>` : ''}
          </div>
        </div>
        <div class="scan-action">
          <i class="fas fa-arrow-right"></i>
        </div>
      </div>
    `;
  }

  private formatDateLabel(dateStr: string): string {
    const date = new Date(dateStr);
    if (this.selectedDays <= 14) {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    } else if (this.selectedDays <= 90) {
      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    } else {
      return date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
    }
  }

  private formatSeverityName(severity: string): string {
    return severity.charAt(0).toUpperCase() + severity.slice(1);
  }

  private formatProviderName(provider: string): string {
    switch (provider) {
      case 'osv':
        return 'OSV';
      case 'dependency_track':
        return 'Dependency Track';
      default:
        return provider;
    }
  }

  private formatDate(dateStr: string): string {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    } catch {
      return dateStr;
    }
  }

  // Drill-down methods
  private async handleTimelineClick(event: ChartEvent, elements: ActiveElement[]): Promise<void> {
    if (!elements.length || !this.data) return;

    const dataIndex = elements[0].index;
    const selectedDate = this.data.time_series[dataIndex].date;

    await this.loadDrillDownData('date', selectedDate, `Vulnerabilities on ${this.formatDateLabel(selectedDate)}`);
  }

  private async handleSeverityClick(event: ChartEvent, elements: ActiveElement[]): Promise<void> {
    if (!elements.length || !this.data) return;

    const dataIndex = elements[0].index;
    const severityEntries = Object.entries(this.data.summary.severity_totals).filter(([, count]) => count > 0);
    const severity = severityEntries[dataIndex]?.[0];

    if (severity) {
      await this.loadDrillDownData('severity', severity, `${this.formatSeverityName(severity)} Severity Vulnerabilities`);
    }
  }

  private async handleProviderClick(event: ChartEvent, elements: ActiveElement[]): Promise<void> {
    if (!elements.length || !this.data) return;

    const dataIndex = elements[0].index;
    const providers = Object.keys(this.data.summary.provider_summary).filter(provider =>
      this.data!.summary.provider_summary[provider].vulnerabilities > 0
    );
    const provider = providers[dataIndex];

    if (provider) {
      await this.loadDrillDownData('provider', provider, `${this.formatProviderName(provider)} Vulnerabilities`);
    }
  }

  private async loadDrillDownData(filterType: string, filterValue: string, title: string): Promise<void> {
    try {
      const params = new URLSearchParams({
        days: this.selectedDays.toString(),
        filter_type: filterType,
        filter_value: filterValue,
        component_id: this.componentId,
        latest_sbom_only: 'true'
      });

      const response = await fetch(
        `/api/v1/vulnerability-scanning/workspaces/${this.teamKey}/vulnerability-drill-down?${params}`
      );

      if (!response.ok) {
        throw new Error(`Failed to load drill-down data: ${response.status}`);
      }

      this.drillDownData = await response.json() as DrillDownData;
      this.showDrillDown(title);
    } catch (err) {
      console.error('Failed to load drill-down data:', err);
      this.drillDownData = {
        components: [],
        sboms: [],
        vulnerabilities: []
      };
    }
  }

  private showDrillDown(title: string): void {
    const section = document.getElementById('drill-down-section');
    const titleEl = document.getElementById('drill-down-title');
    const contentEl = document.getElementById('drill-down-content');

    if (!section || !titleEl || !contentEl) return;

    titleEl.textContent = title;
    section.classList.remove('d-none');

    // Render drill-down content based on available data
    let content = '';

    if (this.drillDownData?.components && this.drillDownData.components.length > 0) {
      content += this.renderComponentsBreakdown(this.drillDownData.components);
    }

    if (this.drillDownData?.sboms && this.drillDownData.sboms.length > 0) {
      content += this.renderSbomsBreakdown(this.drillDownData.sboms);
    }

    if (this.drillDownData?.vulnerabilities && this.drillDownData.vulnerabilities.length > 0) {
      content += this.renderVulnerabilitiesBreakdown(this.drillDownData.vulnerabilities);
    }

    contentEl.innerHTML = content || '<p class="text-muted">No detailed data available.</p>';
  }

  private renderComponentsBreakdown(components: ComponentItem[]): string {
    return `
      <div class="components-breakdown">
        <h6 class="section-title">
          Components with Vulnerabilities (${components.length})
          <small class="text-muted ms-2">Click to view details</small>
        </h6>
        <div class="components-list">
          ${components.map(component => `
            <div class="component-item" onclick="navigateToComponent('${component.id}')">
              <div class="component-info">
                <div class="component-name">
                  <i class="fas fa-cube me-2"></i>
                  ${component.name}
                </div>
                <div class="component-meta">
                  ${component.sbom_count} SBOM${component.sbom_count !== 1 ? 's' : ''}
                </div>
              </div>
              <div class="component-vulns">
                <span class="vuln-count">${component.vulnerability_count}</span>
                <span class="vuln-label">vulnerabilities</span>
                <div class="severity-breakdown">
                  ${component.severities.critical > 0 ? `<span class="severity-badge critical">${component.severities.critical} Critical</span>` : ''}
                  ${component.severities.high > 0 ? `<span class="severity-badge high">${component.severities.high} High</span>` : ''}
                  ${component.severities.medium > 0 ? `<span class="severity-badge medium">${component.severities.medium} Medium</span>` : ''}
                  ${component.severities.low > 0 ? `<span class="severity-badge low">${component.severities.low} Low</span>` : ''}
                </div>
              </div>
              <div class="component-action">
                <i class="fas fa-arrow-right"></i>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  private renderSbomsBreakdown(sboms: SbomItem[]): string {
    return `
      <div class="sboms-breakdown mt-4">
        <h6 class="section-title">SBOMs with Vulnerabilities</h6>
        <div class="sboms-list">
          ${sboms.map(sbom => `
            <div class="sbom-item" onclick="navigateToSbom('${sbom.id}')">
              <div class="sbom-info">
                <div class="sbom-name">
                  <i class="fas fa-file-code me-2"></i>
                  ${sbom.name}
                </div>
                <div class="sbom-meta">
                  <span class="format-badge">${sbom.format} ${sbom.format_version}</span>
                  <span class="scan-date">Last scan: ${this.formatDate(sbom.last_scan_date)}</span>
                </div>
              </div>
              <div class="sbom-vulns">
                <span class="vuln-count">${sbom.vulnerability_count}</span>
                <span class="vuln-label">vulnerabilities</span>
                <div class="severity-breakdown">
                  ${sbom.severities.critical > 0 ? `<span class="severity-badge critical">${sbom.severities.critical} Critical</span>` : ''}
                  ${sbom.severities.high > 0 ? `<span class="severity-badge high">${sbom.severities.high} High</span>` : ''}
                  ${sbom.severities.medium > 0 ? `<span class="severity-badge medium">${sbom.severities.medium} Medium</span>` : ''}
                  ${sbom.severities.low > 0 ? `<span class="severity-badge low">${sbom.severities.low} Low</span>` : ''}
                </div>
              </div>
              <div class="sbom-action">
                <i class="fas fa-arrow-right"></i>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  private renderVulnerabilitiesBreakdown(vulnerabilities: VulnerabilityItem[]): string {
    return `
      <div class="vulnerabilities-breakdown mt-4">
        <h6 class="section-title">Top Vulnerabilities (${vulnerabilities.length})</h6>
        <div class="vulnerabilities-list">
          ${vulnerabilities.slice(0, 10).map(vuln => `
            <div class="vulnerability-item" onclick="openVulnerabilityDetails('${vuln.id}', '${vuln.external_url || ''}')">
              <div class="vuln-info">
                <div class="vuln-id">
                  <i class="fas fa-shield-alt me-2"></i>
                  ${vuln.id}
                </div>
                <div class="vuln-summary">${vuln.summary || 'No summary available'}</div>
              </div>
              <div class="vuln-details">
                <span class="severity-badge ${vuln.severity.toLowerCase()}">${vuln.severity}</span>
                <span class="affected-count">${vuln.affected_components || 0} component${(vuln.affected_components || 0) !== 1 ? 's' : ''}</span>
              </div>
              <div class="vuln-action">
                <i class="fas fa-external-link-alt"></i>
              </div>
            </div>
          `).join('')}
        </div>
        ${vulnerabilities.length > 10 ? `
          <div class="show-more-vulns">
            <button class="btn btn-outline-primary btn-sm" onclick="showAllVulnerabilities()">
              Show All ${vulnerabilities.length} Vulnerabilities
            </button>
          </div>
        ` : ''}
      </div>
    `;
  }
}

// Global functions for navigation and actions
declare global {
  interface Window {
    vulnerabilityTrendsConfig: {
      componentId: string;
      teamKey: string;
      hasData: boolean;
      selectedDays: number;
      chartType: string;
    };
    navigateToComponent: (componentId: string) => void;
    navigateToSbom: (sbomId: string) => void;
    openVulnerabilityDetails: (vulnId: string, externalUrl?: string) => void;
    loadAllScans: () => void;
    showAllRecentScans: () => void;
    showAllVulnerabilities: () => void;
    closeDrillDown: () => void;
    loadVulnerabilityData: () => void;
  }
}

// Global navigation functions
window.navigateToComponent = (componentId: string): void => {
  window.location.href = `/component/${componentId}/`;
};

window.navigateToSbom = (sbomId: string): void => {
  window.location.href = `/sbom/${sbomId}/`;
};

window.openVulnerabilityDetails = (vulnId: string, externalUrl?: string): void => {
  if (externalUrl) {
    window.open(externalUrl, '_blank');
  } else if (vulnId.startsWith('CVE-')) {
    window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnId}`, '_blank');
  } else if (vulnId.startsWith('GHSA-')) {
    window.open(`https://github.com/advisories/${vulnId}`, '_blank');
  }
};

window.loadAllScans = (): void => {
  const config = window.vulnerabilityTrendsConfig;
  if (config?.teamKey) {
    const params = new URLSearchParams({
      days: config.selectedDays.toString()
    });
    if (config.componentId) {
      params.append('component_id', config.componentId);
    }
    window.location.href = `/workspace/${config.teamKey}/vulnerability-scans?${params}`;
  }
};

window.showAllRecentScans = (): void => {
  // This would show all recent scans in the drill-down view
  // Implementation would be similar to the Vue component
};

window.showAllVulnerabilities = (): void => {
  const config = window.vulnerabilityTrendsConfig;
  if (config?.teamKey) {
    const params = new URLSearchParams({
      days: config.selectedDays.toString()
    });
    if (config.componentId) {
      params.append('component_id', config.componentId);
    }
    window.location.href = `/workspace/${config.teamKey}/vulnerabilities?${params}`;
  }
};

window.closeDrillDown = (): void => {
  const section = document.getElementById('drill-down-section');
  if (section) {
    section.classList.add('d-none');
  }
};

window.loadVulnerabilityData = (): void => {
  // This will be called from the retry button
  if (window.vulnerabilityTrendsInstance) {
    window.vulnerabilityTrendsInstance.loadData();
  }
};

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  const config = window.vulnerabilityTrendsConfig;
  if (config && config.componentId && config.teamKey) {
    const instance = new VulnerabilityTrendsComponent(config);
    // Store instance globally for access from retry buttons
    (window as any).vulnerabilityTrendsInstance = instance;
  }
});

export default VulnerabilityTrendsComponent;
